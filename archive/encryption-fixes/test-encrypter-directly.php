<?php

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Encrypter ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô Laravel Framework
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà Laravel ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
 */

echo "===== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Encrypter ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á =====\n\n";

// ‡πÇ‡∏´‡∏•‡∏î autoloader ‡∏Ç‡∏≠‡∏á Composer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ
require __DIR__ . '/vendor/autoload.php';

// 1. ‡∏≠‡πà‡∏≤‡∏ô APP_KEY ‡∏à‡∏≤‡∏Å .env
echo "1. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env...\n";
$envPath = __DIR__ . '/.env';
$appKey = null;

if (file_exists($envPath)) {
    $envContent = file_get_contents($envPath);
    if (preg_match('/APP_KEY=(.+?)(\s|$)/m', $envContent, $matches)) {
        $appKey = $matches[1];
        echo "‡∏û‡∏ö APP_KEY: " . $appKey . "\n";
    }
}

if (!$appKey) {
    echo "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö APP_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà..\n";
    $appKey = 'base64:' . base64_encode(random_bytes(32));
}

// 2. ‡πÅ‡∏õ‡∏•‡∏á APP_KEY ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
echo "\n2. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á APP_KEY ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ...\n";
$key = null;

if (strpos($appKey, 'base64:') === 0) {
    $key = base64_decode(substr($appKey, 7));
    $keyLength = strlen($key);
    echo "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå: " . $keyLength . " ‡πÑ‡∏ö‡∏ï‡πå\n";
    
    if ($keyLength !== 32) {
        echo "‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 32 ‡πÑ‡∏ö‡∏ï‡πå ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö aes-256-cbc\n";
    }
} else {
    echo "‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: APP_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö base64:\n";
    exit(1);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏•‡∏≤‡∏™ Encrypter ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
echo "\n3. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™ Encrypter...\n";

if (!class_exists('Illuminate\Encryption\Encrypter')) {
    echo "‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™ Illuminate\\Encryption\\Encrypter\n";
    exit(1);
}

// 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Encrypter instance
echo "\n4. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Encrypter instance...\n";
try {
    $encrypter = new \Illuminate\Encryption\Encrypter($key, 'aes-256-cbc');
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Encrypter instance ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n";
    
    // ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ method ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô Encrypter
    $methods = get_class_methods($encrypter);
    echo "‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ Encrypter: " . implode(', ', $methods) . "\n";
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    $requiredMethods = ['encrypt', 'decrypt', 'getKey', 'getAllKeys', 'getPreviousKeys'];
    $missingMethods = [];
    
    foreach ($requiredMethods as $method) {
        if (!method_exists($encrypter, $method)) {
            $missingMethods[] = $method;
        }
    }
    
    if (!empty($missingMethods)) {
        echo "‚ö†Ô∏è ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: " . implode(', ', $missingMethods) . "\n";
    } else {
        echo "‚úÖ ‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n";
    }
} catch (\Exception $e) {
    echo "‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
    exit(1);
}

// 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
echo "\n5. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™...\n";
try {
    $originalText = '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™';
    $encrypted = $encrypter->encrypt($originalText);
    echo "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™: " . $encrypted . "\n";
    
    $decrypted = $encrypter->decrypt($encrypted);
    echo "‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™: " . $decrypted . "\n";
    
    if ($decrypted === $originalText) {
        echo "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô! ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö\n";
    } else {
        echo "‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô! ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö\n";
    }
} catch (\Exception $e) {
    echo "‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
}

// 5. ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
echo "\n===== ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ =====\n";

if (!isset($missingMethods) || empty($missingMethods)) {
    echo "‚úÖ ‡∏Ñ‡∏•‡∏≤‡∏™ Encrypter ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á\n";
    echo "üîç ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô Laravel Service Container\n";
    echo "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n";
    echo "1. ‡∏•‡∏≠‡∏á register CustomEncryptionProvider:\n";
    echo "   - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå app/Providers/CustomEncryptionProvider.php\n";
    echo "   - ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô bootstrap/app.php\n";
    echo "2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á config/app.php ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ env() function ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á\n";
    echo "3. ‡∏£‡∏±‡∏ô: php artisan config:clear\n";
} else {
    echo "‚ö†Ô∏è ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ Encrypter (‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)\n";
    echo "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n";
    echo "1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏≠‡∏¥‡∏ô‡∏™‡∏ï‡∏≠‡∏• Laravel package: composer update illuminate/encryption\n";
    echo "2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå interface ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ\n";
}

echo "\n‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö\n";
