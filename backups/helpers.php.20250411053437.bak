<?php

use Illuminate\Encryption\Encrypter;

/**
 * แทนที่ฟังก์ชั่น encrypt ของ Laravel เพื่อใช้ encrypter ที่เรากำหนด key และ cipher เอง
 */
if (!function_exists('custom_encrypt')) {
    function custom_encrypt($value, $serialize = true) {
        static $encrypter = null;
        
        if ($encrypter === null) {
            try {
                // อ่าน key จากไฟล์ .env โดยตรง
                $env = file_get_contents(base_path('.env'));
                if (preg_match('/APP_KEY=base64:([^\n]+)/', $env, $matches)) {
                    $key = base64_decode($matches[1]);
                } else {
                    // ถ้าไม่พบ key ในไฟล์ .env ให้สร้างใหม่
                    $key = random_bytes(32);
                }
                
                // ใช้ aes-256-cbc เสมอ
                $cipher = 'aes-256-cbc';
                
                // สร้าง encrypter
                $encrypter = new Encrypter($key, $cipher);
                
                // บันทึกข้อมูลเพื่อ debug
                $log = date('Y-m-d H:i:s') . " - Custom Encrypter created. Key length: " . strlen($key) . " bytes\n";
                file_put_contents(storage_path('logs/custom-encryption.log'), $log, FILE_APPEND);
                
            } catch (\Exception $e) {
                // บันทึกข้อผิดพลาด
                $log = date('Y-m-d H:i:s') . " - Error creating custom encrypter: " . $e->getMessage() . "\n";
                file_put_contents(storage_path('logs/custom-encryption-error.log'), $log, FILE_APPEND);
                
                // สร้าง key แบบ fallback
                $key = random_bytes(32);
                $encrypter = new Encrypter($key, 'aes-256-cbc');
            }
        }
        
        return $encrypter->encrypt($value, $serialize);
    }
}

/**
 * แทนที่ฟังก์ชั่น decrypt ของ Laravel เพื่อใช้ encrypter ที่เรากำหนด key และ cipher เอง
 */
if (!function_exists('custom_decrypt')) {
    function custom_decrypt($payload, $unserialize = true) {
        static $encrypter = null;
        
        if ($encrypter === null) {
            try {
                // อ่าน key จากไฟล์ .env โดยตรง
                $env = file_get_contents(base_path('.env'));
                if (preg_match('/APP_KEY=base64:([^\n]+)/', $env, $matches)) {
                    $key = base64_decode($matches[1]);
                } else {
                    // ถ้าไม่พบ key ในไฟล์ .env ให้สร้างใหม่
                    $key = random_bytes(32);
                }
                
                // ใช้ aes-256-cbc เสมอ
                $cipher = 'aes-256-cbc';
                
                // สร้าง encrypter
                $encrypter = new Encrypter($key, $cipher);
                
            } catch (\Exception $e) {
                // บันทึกข้อผิดพลาด
                $log = date('Y-m-d H:i:s') . " - Error creating custom decrypter: " . $e->getMessage() . "\n";
                file_put_contents(storage_path('logs/custom-encryption-error.log'), $log, FILE_APPEND);
                
                // สร้าง key แบบ fallback
                $key = random_bytes(32);
                $encrypter = new Encrypter($key, 'aes-256-cbc');
            }
        }
        
        return $encrypter->decrypt($payload, $unserialize);
    }
}

<?php

use App\Encryption\SimpleEncrypter;

if (!function_exists('simple_encrypt')) {
    /**
     * เข้ารหัสข้อมูลด้วย SimpleEncrypter
     */
    function simple_encrypt($value, $serialize = true) {
        return app('simple-encrypter')->encrypt($value, $serialize);
    }
}

if (!function_exists('simple_decrypt')) {
    /**
     * ถอดรหัสข้อมูลด้วย SimpleEncrypter
     */
    function simple_decrypt($payload, $unserialize = true) {
        return app('simple-encrypter')->decrypt($payload, $unserialize);
    }
}

// แทนที่ฟังก์ชัน encrypt และ decrypt ดั้งเดิมเพื่อแก้ไขปัญหา
if (!function_exists('encrypt')) {
    /**
     * เข้ารหัสข้อมูล (แทนที่ฟังก์ชัน encrypt เดิม)
     */
    function encrypt($value, $serialize = true) {
        return simple_encrypt($value, $serialize);
    }
}

if (!function_exists('decrypt')) {
    /**
     * ถอดรหัสข้อมูล (แทนที่ฟังก์ชัน decrypt เดิม)
     */
    function decrypt($payload, $unserialize = true) {
        return simple_decrypt($payload, $unserialize);
    }
}